import os

class Provider:
    def __init__(self, name, base_url=None, api_key=None, models=None):
        self.name = name
        self.base_url = base_url
        self.api_key = api_key if api_key else os.environ.get(f"{name.upper()}_API_KEY")
        self.models = models or []

PROVIDERS_CONFIG = {
    "Cerebras": Provider("Cerebras", "https://api.cerebras.ai/v1"),
    "Groq": Provider("Groq", "https://api.groq.com/openai/v1"),
    "Gemini": Provider("Gemini", "https://generativelanguage.googleapis.com/v1beta/openai/"),
    "SambaNova": Provider("SambaNova", "https://api.sambanova.ai/v1"),
    "Zhipu": Provider("Zhipu", "https://open.bigmodel.cn/api/paas/v4/"),
    "GLHF": Provider("GLHF", "https://glhf.chat/api/openai/v1"),
    "SiliconFlow": Provider("SiliconFlow", "https://api.siliconflow.cn/v1"),
    "ModelScope": Provider("ModelScope", "https://api-inference.modelscope.cn/v1"),
    "LMstudio": Provider("LMstudio", "http://localhost:1234/v1", "not-needed"),
    "Kobold": Provider("Kobold", "http://localhost:5001/v1", "not-needed"),
    "Ollama": Provider("Ollama", "http://localhost:11434/v1", "ollama")
}

PROVIDERS = ["All"] + list(PROVIDERS_CONFIG.keys())
DEFAULT_PROVIDER = "All"

# Available models with their respective providers
AVAILABLE_MODELS = [
    "[Cerebras] llama3.3-70b",
    "[Cerebras] llama3.1-8b",
    "[Groq] qwen-2.5-32b",
    "[Groq] deepseek-r1-distill-qwen-32b",
    "[Groq] llama-3.1-8b-instant",
    "[Groq] llama-3.2-90b-vision-preview",
    "[Groq] llama-3.3-70b-versatile",
    "[Groq] llama-3.3-70b-specdec",
    "[Gemini] gemini-2.0-flash-lite-preview-02-05",
    "[Gemini] gemini-2.0-flash-exp",
    "[Gemini] gemini-2.0-pro-exp-02-05",
    "[Gemini] gemini-2.0-flash-thinking-exp-01-21",
    "[Gemini] gemini-2.5-pro-exp-03-25",
    "[Gemini] gemini-2.5-flash-preview-04-17",
    "[SambaNova] Meta-Llama-3.1-8B-Instruct",
    "[SambaNova] Meta-Llama-3.1-70B-Instruct",
    "[SambaNova] Meta-Llama-3.1-405B-Instruct",
    "[SambaNova] Qwen2.5-72B-Instruct",
    "[SambaNova] Qwen2.5-Coder-32B-Instruct",
    "[SambaNova] Meta-Llama-3.3-70B-Instruct",
    "[SambaNova] QwQ-32B-Preview",
    "[Zhipu] glm-4-flash",
    "[Zhipu] glm-4v-flash",
    "[GLHF] hf:meta-llama/Llama-3.3-70B-Instruct",
    "[GLHF] hf:Qwen/Qwen2.5-Coder-32B-Instruct",
    "[SiliconFlow] Qwen/Qwen2.5-7B-Instruct",
    "[ModelScope] Qwen/Qwen2.5-72B-Instruct",
    "[ModelScope] Qwen/Qwen2.5-Coder-32B-Instruct",
    "[ModelScope] Qwen/Qwen2.5-VL-72B-Instruct",
    "[ModelScope] deepseek-ai/DeepSeek-V3",
]

def get_provider_info(model_name):
    """Get provider information from model name"""
    if not model_name.startswith("["):
        return None
    provider_name = model_name[1:model_name.index("]")]
    return PROVIDERS_CONFIG.get(provider_name)

def get_api_models(provider):
    """Generic function to fetch models from API endpoints"""
    try:
        import requests
        response = requests.get(f"{provider.base_url}/models", timeout=1)
        models_data = response.json()
        return [f"[{provider.name}] {model['id']}" for model in models_data['data']]
    except:
        return []

def filter_models_by_provider(provider):
    """Filter models list by provider"""
    if provider == "All":
        return AVAILABLE_MODELS
    return [m for m in AVAILABLE_MODELS if m.startswith(f"[{provider}]")]

def refresh_available_models(include_local=False):
    """Refresh available models list"""
    global AVAILABLE_MODELS
    base_models = [m for m in AVAILABLE_MODELS if not m.startswith(("[LMstudio]", "[Kobold]", "[Ollama]"))]
    
    if include_local:
        local_providers = ["LMstudio", "Kobold", "Ollama"]
        local_models = []
        for provider_name in local_providers:
            provider = PROVIDERS_CONFIG[provider_name]
            local_models.extend(get_api_models(provider))
        AVAILABLE_MODELS = base_models + local_models
    else:
        AVAILABLE_MODELS = base_models

# Default folder path (placeholder) / 默认文件夹路径 (使用占位符)
DEFAULT_FOLDER_PATH = os.path.dirname(__file__)

DEFAULT_MODEL = AVAILABLE_MODELS[0]

DEFAULT_TEMPERATURE = "1.0"

DEFAULT_THEME = "light"

# UI design variables
UI_FONT_FAMILY = "'Inter', 'PingFang SC', 'Microsoft YaHei', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
UI_FONT_SIZE_SMALL = "9pt"
UI_FONT_SIZE_NORMAL = "10pt" 
UI_FONT_SIZE_LARGE = "12pt"
UI_BORDER_RADIUS = "8px"  
UI_PADDING_SMALL = "6px"  
UI_PADDING_NORMAL = "10px"
UI_PADDING_LARGE = "14px"
UI_SPACING = "8px"  
UI_MARGIN = "12px"

# Glassmorphism effect configuration
UI_GLASS_OPACITY = "0.8"
UI_BLUR_RADIUS = "10px"
UI_SHADOW = "0 8px 16px rgba(0, 0, 0, 0.15)"
UI_BORDER_WIDTH = "1px"

# Primary, Secondary, Success, Danger colors
PRIMARY_COLOR = "#0078D7"  # Microsoft Blue
PRIMARY_HOVER_COLOR = "#005A9E"
SUCCESS_COLOR = "#4CAF50"  # Green
SUCCESS_HOVER_COLOR = "#367C39"
DANGER_COLOR = "#E81123"   # Red
DANGER_HOVER_COLOR = "#C41019"
INFO_COLOR = "#3B82F6"     # Blue
WARNING_COLOR = "#F59E0B"  # Amber

# Theme colors
THEMES = {
    "light": {
        # Base colors
        "window_bg": "rgba(245, 245, 245, 0.85)",   
        "text": "#000000",
        "text_secondary": "#555555",
        "input_bg": "rgba(255, 255, 255, 0.7)",  
        "input_border": "rgba(204, 204, 204, 0.8)",  
        
        # Button colors
        "button_bg": "rgba(0, 120, 215, 0.9)",  
        "button_hover": "rgba(0, 90, 158, 0.95)",
        "button_text": "#FFFFFF",
        "button_success_bg": "rgba(76, 175, 80, 0.9)",
        "button_success_hover": "rgba(54, 124, 57, 0.95)",
        "button_danger_bg": "rgba(232, 17, 35, 0.9)",
        "button_danger_hover": "rgba(196, 16, 25, 0.95)",
        
        # Component specific
        "title_button_hover": DANGER_COLOR,
        "sidebar_bg": "rgba(235, 235, 235, 0.75)",  
        "dialog_bg": "rgba(245, 245, 245, 0.85)",  
        "dropdown_text": "#000000",
        "dropdown_bg": "rgba(255, 255, 255, 0.9)",  
        "tab_bg": "rgba(236, 236, 236, 0.7)",  
        "tab_active_bg": "rgba(255, 255, 255, 0.85)",  
        "tab_text": "#000000",
        
        # Glass effect
        "glass_border": "rgba(255, 255, 255, 0.5)",
        "glass_shadow": "0 8px 32px rgba(0, 0, 0, 0.1)",
        
        # Status colors
        "status_success": SUCCESS_COLOR,
        "status_error": DANGER_COLOR,
        "status_info": INFO_COLOR,
        "status_warning": WARNING_COLOR,

        # Markdown viewer
        "md_header": INFO_COLOR,
        "md_code_bg": "rgba(241, 245, 249, 0.8)",
        "md_blockquote": "#64748B",
        "md_blockquote_border": "#CBD5E1",
        "md_link": INFO_COLOR,
        "md_table_border": "#E2E8F0",
        "md_table_header_bg": "#F1F5F9",
    },
    "dark": {
        # Base colors
        "window_bg": "rgba(45, 45, 45, 0.8)",   
        "text": "#FFFFFF",
        "text_secondary": "#BBBBBB",
        "input_bg": "rgba(61, 61, 61, 0.7)",  
        "input_border": "rgba(85, 85, 85, 0.8)",  
        
        # Button colors
        "button_bg": "rgba(0, 120, 215, 0.9)",  
        "button_hover": "rgba(0, 90, 158, 0.95)",
        "button_text": "#FFFFFF",
        "button_success_bg": "rgba(76, 175, 80, 0.9)", 
        "button_success_hover": "rgba(54, 124, 57, 0.95)",
        "button_danger_bg": "rgba(232, 17, 35, 0.9)",
        "button_danger_hover": "rgba(196, 16, 25, 0.95)",
        
        # Component specific
        "title_button_hover": DANGER_COLOR,
        "sidebar_bg": "rgba(37, 37, 37, 0.75)",  
        "dialog_bg": "rgba(45, 45, 45, 0.85)",  
        "dropdown_text": "#FFFFFF",
        "dropdown_bg": "rgba(61, 61, 61, 0.9)",  
        "tab_bg": "rgba(34, 34, 34, 0.7)",  
        "tab_active_bg": "rgba(61, 61, 61, 0.85)",  
        "tab_text": "#FFFFFF",
        
        # Glass effect
        "glass_border": "rgba(85, 85, 85, 0.5)",
        "glass_shadow": "0 8px 32px rgba(0, 0, 0, 0.25)",
        
        # Status colors
        "status_success": SUCCESS_COLOR,
        "status_error": DANGER_COLOR,
        "status_info": INFO_COLOR, 
        "status_warning": WARNING_COLOR,
        
        # Markdown viewer
        "md_header": INFO_COLOR,
        "md_code_bg": "rgba(30, 41, 59, 0.8)",
        "md_blockquote": "#94A3B8",
        "md_blockquote_border": "#4B5563",
        "md_link": "#60A5FA",
        "md_table_border": "#4B5563",
        "md_table_header_bg": "#1E293B",
    }
}

USE_PREDEFINED_PREFIX = True
USE_TRANSCRIPT_TEXT = True

# Continuous dialogue related configuration
ENABLE_CONTINUOUS_DIALOGUE = False  
MAX_CONTEXT_MESSAGES = 5  
SUMMARIZE_CONTEXT = True  
TRANSCRIPT_POSITION = {}  
MAX_TOKEN_PER_REQUEST = 8000  

# Gemini model related configuration
ENABLE_GEMINI_SEARCH = False  

# Auxiliary mode configuration
AUXILIARY_MODES = [
    "none",
    "coding-solution", "coding-debug-general", "coding-debug-correction",
    "coding-debug-time-optimize", "coding-debug-space-optimize",
    "meeting-summarizer",  
    "action-item-extractor",  
    "topic-tracker",  
    "sentiment-analyzer",  
    "question-generator",  
]
DEFAULT_AUXILIARY_MODE = "none"
CURRENT_AUXILIARY_MODE = "none"

# Additional prompt for coding solution mode
CODING_SOLUTION_PROMPT = """
    You are a highly skilled coding assistant.  
    Your task is to provide a complete and correct solution to the problem depicted in the image.  
    Output the code only, without any surrounding text or explanation. 
    Do not include any comments in your code. 
    Ensure the code is directly executable and addresses all aspects of the problem presented.
"""

# Additional prompt for debugging-general mode
CODING_DEBUG_GENERAL_PROMPT = """
    You are a highly skilled coding assistant. 
    Analyze the provided code and the problem description in the image. 
    Identify and describe any bugs, errors, or inefficiencies.  
    Provide specific suggestions for improvement, focusing on correctness, efficiency, and best practices.  
    Output a detailed analysis, and then provide the corrected code block.  
    Do *not* include the corrected code within backticks or a code block.
"""

# Additional prompt for debugging-code correction mode
CODING_DEBUG_CORRECTION_PROMPT = """
    You are an expert code debugger. 
    The following code is intended to solve the problem described in the image, but it contains errors.  
    Identify the errors, and output *only* the corrected code. 
    Do not include any surrounding text, explanations, or comments. 
    Do not include the code within backticks or a code block.
"""

# Additional prompt for debugging-time complexity optimization mode
CODING_DEBUG_TIME_PROMPT = """
    You are a performance optimization expert.  
    Analyze the given code, which is a solution to the problem in the image.  
    Your goal is to improve its time complexity. 
    Identify any inefficient parts of the algorithm and suggest specific optimizations.  
    Output a detailed analysis, explaining the changes and their impact on time complexity.  
    Then, output the *optimized* code. 
    Do *not* include the corrected code within backticks or a code block.
"""

# Additional prompt for debugging-space complexity optimization mode
CODING_DEBUG_SPACE_PROMPT = """
    You are a memory optimization expert. 
    Analyze the given code, which is a solution to the problem in the image, and focus on improving its space complexity. 
    Identify areas where memory usage can be reduced. 
    Provide a detailed analysis explaining your changes and their effect on memory usage. 
    Then, output the *optimized* code. 
    Do *not* include the corrected code within backticks or a code block.
"""

# Meeting Summarizer Mode
MEETING_SUMMARIZER_PROMPT = """
You are a highly efficient meeting summarizer.  Your task is to analyze the provided meeting transcript and produce a concise, informative summary.  The summary should cover the key discussion points, decisions made, and any unresolved issues.  Organize the summary in a clear and easily readable format (e.g., bullet points or short paragraphs). Focus on brevity and clarity.
"""

# Action Item Extractor Mode
ACTION_ITEM_EXTRACTOR_PROMPT = """
You are an action item extraction specialist.  Analyze the following meeting transcript and identify all action items discussed. For each action item, clearly state:

1.  **What** needs to be done.
2.  **Who** is responsible for the action. (If explicitly stated in the transcript; otherwise, indicate "Unassigned.")
3.  **When** it is due (if a deadline is mentioned; otherwise, indicate "No deadline specified.").
4. **Timestamp**.
Present the action items in a numbered list.
"""

# Topic Tracker Mode
TOPIC_TRACKER_PROMPT = """
You are a meeting topic tracker. Analyze the provided transcript and identify the major topics discussed.  For each topic, provide:

1.  A brief, descriptive title for the topic.
2.  The start and end timestamps (in the format [HH:MM:SS] - [HH:MM:SS]) where the topic was discussed.
3. A very short summary (1-2 sentences max) of what was said about it.

Present the topics in chronological order.
"""

# Sentiment Analyzer Mode
SENTIMENT_ANALYZER_PROMPT = """
You are a sentiment analysis expert. Analyze the given meeting transcript and determine the overall sentiment expressed during the meeting. Identify sections with strong positive, negative, or neutral sentiment. Provide:

1.  An overall sentiment score for the entire meeting (e.g., "Slightly Positive," "Very Negative," "Neutral").
2.  A list of key phrases or sentences, along with their timestamps and associated sentiment (Positive, Negative, Neutral).
3. A very short summary (1-2 sentences max) of the main emotional trends.
"""

# Question Generator Mode
QUESTION_GENERATOR_PROMPT = """
You are a skilled facilitator. Based on the following meeting transcript, generate a list of insightful questions that could be asked to:

1.  Clarify any ambiguous points.
2.  Encourage further discussion on important topics.
3.  Identify potential problems or roadblocks.
4.  Ensure all participants have a shared understanding.
5.  Help to reach next step.

The questions should be open-ended and designed to promote deeper thinking and engagement. Do not answer the questions.
"""